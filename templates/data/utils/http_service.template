import 'dart:async';
import 'dart:convert';
import 'dart:developer';
import 'package:http/http.dart' as http;
import 'api_response.dart';
import 'failure.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

final httpServiceProvider = Provider((ref) => HttpService());

class HttpService {
  Future<ApiResponse> get({required String url}) async {
    try {
      final response = await http.get(Uri.parse(url));
      log("URL: $url");
      return _handleResponse(response);
    } catch (e) {
      throw NetworkFailure(message: e.toString());
    }
  }

  Future<ApiResponse> post({required String url, required Map<String, dynamic> body}) async {
    try {
      final response = await http.post(
        Uri.parse(url),
        headers: {"Content-Type": "application/json"},
        body: json.encode(body),
      );
      return _handleResponse(response);
    } catch (e) {
      throw NetworkFailure(message: e.toString());
    }
  }

  Future<ApiResponse> put({required String url, required Map<String, dynamic> body}) async {
    try {
      final response = await http.put(
        Uri.parse(url),
        headers: {"Content-Type": "application/json"},
        body: json.encode(body),
      );
      return _handleResponse(response);
    } catch (e) {
      throw NetworkFailure(message: e.toString());
    }
  }

  Future<ApiResponse> patch({required String url, required Map<String, dynamic> body}) async {
    try {
      final response = await http.patch(
        Uri.parse(url),
        headers: {"Content-Type": "application/json"},
        body: json.encode(body),
      );
      return _handleResponse(response);
    } catch (e) {
      throw NetworkFailure(message: e.toString());
    }
  }

  Future<ApiResponse> delete({required String url}) async {
    try {
      final response = await http.delete(Uri.parse(url));
      return _handleResponse(response);
    } catch (e) {
      throw NetworkFailure(message: e.toString());
    }
  }

  Future<ApiResponse> multipart({
    required String url,
    required Map<String, String> headers,
    required Map<String, String> fields,
    required String filePath,
    required String fieldKey,
  }) async {
    try {
      final request = http.MultipartRequest('POST', Uri.parse(url));
      request.headers.addAll(headers);
      fields.forEach((key, value) => request.fields[key] = value);
      request.files.add(await http.MultipartFile.fromPath(fieldKey, filePath));
      final response = await request.send();
      final responseData = await response.stream.toBytes();
      final responseString = String.fromCharCodes(responseData);
      final jsonResponse = json.decode(responseString);
      return _handleResponse(http.Response(jsonResponse, response.statusCode));
    } catch (e) {
      throw NetworkFailure(message: e.toString());
    }
  }

  ApiResponse _handleResponse(http.Response response) {
    try {
      final responseJson = json.decode(response.body.toString());

      if (response.statusCode >= 200 && response.statusCode < 300) {
        return ApiResponse.fromJson(responseJson);
      } else if (response.statusCode == 401) {
        throw UnauthorisedFailure(
          message: 'Unauthorised',
          statusCode: response.statusCode.toString(),
        );
      } else if (response.statusCode == 403) {
        throw ForbiddenFailure(
          message: 'Forbidden',
          statusCode: response.statusCode.toString(),
        );
      } else if (response.statusCode == 404) {
        throw NotFoundFailure(
          message: 'Not Found',
          statusCode: response.statusCode.toString(),
        );
      } else if (response.statusCode == 500) {
        throw ServerFailure(
          message: 'Server Error',
          statusCode: response.statusCode.toString(),
        );
      } else {
        throw ServerFailure(
          message: 'Failed to parse response',
          statusCode: response.statusCode.toString(),
        );
      }
    } catch (e) {
      throw ServerFailure(
        message: 'Failed to parse response: $e',
        statusCode: response.statusCode.toString(),
      );
    }
  }
}
